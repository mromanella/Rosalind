package main

// Problem

// The 20 commonly occurring amino acids are abbreviated by using 20 letters from the English alphabet
// (all letters except for B, J, O, U, X, and Z). Protein strings are constructed from these 20 symbols. Henceforth,
// the term genetic string will incorporate protein strings along with DNA strings and RNA strings.

// The RNA codon table dictates the details regarding the encoding of specific codons into the amino acid alphabet.

// Given: An RNA string s

// corresponding to a strand of mRNA (of length at most 10 kbp).

// Return: The protein string encoded by s

// .
// Sample Dataset

// AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA

// Sample Output

// MAMAPRTEINSTRING

import (
	"fmt"

	"../utils"
)

var (
	test           = "AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA"
	testExpected   = "MAMAPRTEINSTRING"
	infile         = "rosalind_prot.txt"
	infileExpected = "MTVDAPYVRCVVPLSLSMTSLRLCGGATSRCIRSSSTSAIWIQSTDPGHGSVHAINYALWVRSRVANQNQFDSANAGESNIVAHSYRRFKPTENAWCVSRTASEATDEAMLTNHVPARSTFNTWHIQQELAVSGAAFSNSKQIQLVRRLDACISVPKAVIGTYELLLIKVPALHRTSGLNNCPCASRVKDTQLIGGLMAATCVVRWSRPTWSSARGPTLDYSALVDRGTASSLSTLRFPVRATGPFAGRCRSKVKLEDPPGRTLSRCAEETIYGNSEASMAVIIRDNRACKLTKNLRCCMGGLHRRIHLRHLYIVCRLNTFLNYNLLLTDNYPVWCAHRLKKRLRSVWVRAHIVCLTKSPEDGKIAKYSTGDFSCLANPRMTVRTQMRPNSEYGGAPEGSTKRSILPCKYTAGPPSWNPPSKSVQSAKHVRVALKARLAINPRDNRANLVMHSSRLFLTRCTFHGPTRTSLPSATHPGEVYVQWLLPFGFRAHLRNNSVYVECVTCLLGGPCAWERGLTTSHYQSRAGKVMPVQCPGSSSIKVRELPRAQVPLTYTRHGSPSSAKIYLNELSVSAVCEFEEPVPEALLLQSPRAEGTCVTPMRVNESEPYLLMCQRWVAVYLVVSSLVKIEAHWGIDSAHGWTGRSSSKRNVRASNVRGLKELSPNSAGAKRLSCSAGAQKTVDICMLYFFNHEPFYPASWTRTISPTDLAPSHPTFSFVTYHCILPVSTLASHIAGLHAEPRSAHLGYARFTSRYSAWLDLSSLGRNIKQRRVSGSSLAVGPMLRMIMELGSESGPNSLRFSTLTHMDHDPMYFSPVSTLRTNPSLGSRTSKLSGPSSQTASPGVSAPFITNYEPKVCGPFLAHLDIASRVELDDAMVGISNLDSAQINHVYPKVSDTLATSRPRRDFHTLNSHGNFDVGVWCGTRGMLDTVTLSRAVVSVKRWRQRQHDVHDERVSSCLLKVPHSPYNLTYLRPTASPRLGAILIGGTHHLWSKCQQSCLQVTRVYQRRSIRSVPLLTSLVLMTGSLHVCFDGTIPYSLAVAYLPYLVFRESYSRPGSRYLTCCIYGMCRLHVSILRVMSHGNLLLVVEDPVTNSSTSSLQALATYSTGLRRDCPRRDRPTGVPRGTQWICCLGPYIDLLILTGHCAVSCKVQVPPYIISYFFCSSPGGSYSLSRADEAPLTHLPYLASVLPLYGRNTPRSWKVYPASKSLSNCALRYRGGSHVWMIDISPNAGLSQFVGFKGWTVKSLMYKVILPLGPPLSSSSVGSSIDYIGIRLARNISTLPRRFPVILSCWWRAEGRYLIVFPDGCRPYAYRRHGPWLGRTLSLSKNTYPTRLPNSLLFYPYRVEIARRSRHNAQTIESKMHVGKILSGAGVLVKDAPCPEVHNGPATQDQQHGSRFYLYKQTSRQGTLAPGTLQESRLPRRSRLESSFTIDNPEDIPPNQKPTCTVSRPAVTSCISGGLRSDVMKRLLYLGIFKADWSTHLLLQPIGVDKCTLPEVPLHRGSEDKRRAHDFPSKQDLRSVLMLAAIARMHVLRENTTTKTTERSPGSILPMSQQIAPRTMQLRGLMNRPGFTHARSICSGQVNLTFYRTQRRCSVRCVCVREFIPCPGASQSTCTPGHTRKLVTNPGALPLRAWLLSMETRGRHFREQQFRASQMGQRSNRSLCTLLISPCHQIYRIYRTHTTFCFSMIAFAVEMHAGRLLEVIHMLCRAVTHIDQPHLGTTIVLRLEPRIKAITSLVLYDRKLNWPDTTNSCATWDAEGTEPTLSDLSTSCTEAPVSRLPKSAPLASYGGPYPSLHGFGRTQHDTLNRLVCNTLSPPHLRVGSISCNPQSPYLSASLSRIRKPSVVVSGLCTIARDVWRDAAPDTSPCSRAARSTARMKQPPTLSAMSVRHCWSTVAVRLQQGTLYPSRYKVAPETQPHQRNLAGCVRLRIPHSYRYTLLASLARQTASLRTICLRKYIRRPSTEFRAAEQISGSVPLIMVKYLRVLLPSLRSALWLAARNRTRPNPSLLIRSGKSLLSVGLQPPTLDNPATLYRYLTVAVLLITIKTCEDSIHVSPLESPNALMAWYAGPNGKSRLSSHARNSQIGRLFYRGARPLSRAFVVCRMDKSSCAGVVSRSPIWQLSPDLAPLTPYAVIITSVQLLLILASWTSESVQDWVRYFSSLLHMANSLHLTPIVYQIPVVKFATRPASTSHKLFRHDNDPSYRTSLLPQGTAISSLVPRAQRRHKSRHTSGKIVVPHVPASIVREDLRACSARHKAASHFRKADSEFPGNVSSLPAIRSQGYFNPSGLSTTTIMGTAPSTRADNKGGTWLASLAETVSLTDFAYPARSDSWPSPRFLPLHCLNLRSLPKANKLLHEHKRTHKIISPIPSCGAQSAAATSLSTNGSIENVFKQAILRFSRRDRSTRVRAVTSRVLQDFAKVKTFQPKRGTRVRAMVFSIIWCKCAGFLLFALTVAKMRFAETGASMAIQTTMPGDPGHRGRYVLSRKSTNDAERPGSAAPIYLTQIPAKNVDTSEKAAGWRWRPKITCQVKNLCLELGILPSPLYGTTAVIGTLAPGTNIVMRARLPHIMMQRAEFGVAPAALSEHSHVSNQDYLNTQGEEGILNKGFYSVTRVPDNPCVSPSLLTLVLQLVLYGLRSPYLTRGMSYINSCYGNAWFSMLEPAREQVSMRQCLSLVGGHTIGACLKYRQAAKIQRCPDMRCYYIFRSANIRVLSLCRRVRPTCIRYSCRHDLKTEESLAPEDSIIRCRSRGMIRGRNSDNGIWGLWSDQQPLTQKQSFSPRYDPRIAHRKVYNFPCAYAREPPTIKTQVVSTSDAYLICLTCQVSPRECPWSSKYPRLIPPSSPARLSNRRKERDNVDTSFVISVRSWQWMDDVFGFDRQAARRLLINADMFESADYQVTLGRACFNTLPNLYARIRTTRANAT"
)

func convertToProtein(RNA string) string {
	protein := ""
	i := 0
	for i < len(RNA) {
		n := utils.RNACodonTable[RNA[i:i+3]]
		if n == "Stop" {
			break
		}
		protein += n
		i += 3
	}
	return protein
}

func main() {
	ans := convertToProtein(test)
	fmt.Println(ans == testExpected)
	lines, _ := utils.ReadLines(infile, -1)
	RNA := lines[0]
	fmt.Println(convertToProtein(RNA) == infileExpected)
}
